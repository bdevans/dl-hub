
version: '2.3'

services:
  jupyterhub:
    build: 
      context: ./jupyterhub
      args:
        - JUPYTERHUB_VERSION=${JUPYTERHUB_VERSION:-2.0.0}
    image: jupyterhub
    ports:
      #- "80:8000"
      - "8000:8000"
      - "80:80"
      # This may be unnecessary as the proxy may handle port mapping for SSL
      - "443:443"
    container_name: jupyterhub-container
    deploy:
      resources:
        reservations:
          devices:
            - capabilities:
              - gpu
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      #- /shared:/shared
      #- jupyterhub_data:/srv/jupyterhub
      # Volumes for PAM authentication. Require restart to recognise new users
      #- /etc/passwd:/etc/passwd
      #- /etc/shadow:/etc/shadow
      #- /etc/group:/etc/group
    environment:
      NVIDIA_VISIBLE_DEVICES: all
      NVIDIA_DRIVER_CAPABILITIES: all
      #DOCKER_JUPYTER_IMAGE: bdevans/cuda-notebook
      DOCKER_JUPYTER_IMAGE: cuda-dl-lab
      #DOCKER_JUPYTER_IMAGE: jupyterhub/singleuser
      DOCKER_NETWORK_NAME: ${COMPOSE_PROJECT_NAME}_default
      HUB_IP: jupyterhub
      #HUB_IP: "0.0.0.0"
      AUTH_SERVER_ADDRESS: ${AUTH_SERVER_ADDRESS}
      ADMIN_USERS: ${ADMIN_USERS}
#  cuda-base:
#    build:
#      #context: ./docker-stacks/base-notebook
#      context: https://github.com/jupyter/docker-stacks.git
#      dockerfile: base-notebook/Dockerfile
#      args:
#        - ROOT_CONTAINER=nvidia/cuda:11.0.3-cudnn8-devel-ubuntu20.04
#    image: cuda-base-notebook
#    command: echo
#  cuda-test:
#    image: nvidia/cuda:11.0.3-cudnn8-devel-ubuntu20.04
#    command: nvidia-smi
#    deploy:
#      resources:
#        reservations:
#          devices:
#            - capabilities:
#              - gpu
    
volumes:
  jupyterhub_data:
